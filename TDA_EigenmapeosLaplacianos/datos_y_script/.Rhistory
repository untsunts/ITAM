plot(m[1:100],n)
set.seed(125089)
par(mfrow=c(1,3))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
n<-rnorm(100,7*m[1:100], 1.5)
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
set.seed(125089)
par(mfrow=c(1,3))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
n<-rnorm(100,7*m[1:100], 1.75)
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
set.seed(125089)
par(mfrow=c(1,3))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
n<-rnorm(100,6.75*m[1:100], 1.75)
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
set.seed(125089)
par(mfrow=c(1,3))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
n<-rnorm(100,6*m[1:100], 1.5)
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
e<-rexp(100,1/m[1:100])
set.seed(125089)
par(mfrow=c(1,4))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
n<-rnorm(100,6*m[1:100], 1.5)
e<-rexp(100,1/m[1:100])
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
plot(m[1:100],e)
set.seed(125089)
p<-rpois(100,10)
bp<-rbinom(100,m[1:100],(m[1:100]+1)/6)
up<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
np<-rnorm(100,6*m[1:100], 1.5)
ep<-rexp(100,1/m[1:100])
plot(p[1:100],bp)
plot(p[1:100],up)
plot(p[1:100],np)
plot(p[1:100],ep)
p
sort(p)
sort(bp)
bp<-rbinom(100,m[1:100],(m[1:100]+1)/16)
sort(bp)
up<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
sort(up)
set.seed(125089)
par(mfrow=c(1,4))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*m[1:100]-1,max=5*m[1:100]+1)
n<-rnorm(100,6*m[1:100], 1.5)
e<-rexp(100,1/m[1:100])
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
plot(m[1:100],e)
set.seed(125089)
p<-rpois(100,10)
bp<-rbinom(100,p[1:100],(p[1:100]+1)/16)
up<-runif(100,min=5*p[1:100]-1,max=5*p[1:100]+1)
np<-rnorm(100,6*p[1:100], 1.5)
ep<-rexp(100,1/p[1:100])
plot(p[1:100],bp)
plot(p[1:100],up)
plot(p[1:100],np)
plot(p[1:100],ep)
set.seed(125089)
unif<-runif(100,min=0.8,max=1.2)
set.seed(125089)
par(mfrow=c(1,4))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
set.seed(125089)
unif<-runif(100,min=0.8,max=1.2)
set.seed(125089)
par(mfrow=c(1,4))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*unif[1:100]*m[1:100]-1,max=5*unif[1:100]*m[1:100]+1)
n<-rnorm(100,6*unif[1:100]*m[1:100], 1.5)
e<-rexp(100,1/unif[1:100]*m[1:100])
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
plot(m[1:100],e)
e
e<-rexp(100,1/(unif[1:100]*m[1:100]))
e
set.seed(125089)
unif<-runif(100,min=0.8,max=1.2)
set.seed(125089)
par(mfrow=c(1,4))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*unif[1:100]*m[1:100]-1,max=5*unif[1:100]*m[1:100]+1)
n<-rnorm(100,6*unif[1:100]*m[1:100], 1.5)
e<-rexp(100,1/(unif[1:100]*m[1:100]))
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
plot(m[1:100],e)
set.seed(125089)
p<-rpois(100,10)
bp<-rbinom(100,p[1:100],(p[1:100]+1)/16)
up<-runif(100,min=5*unif[1:100]*p[1:100]-1,max=5*unif[1:100]*p[1:100]+1)
np<-rnorm(100,6*unif[1:100]*p[1:100], 1.5)
ep<-rexp(100,1/(unif[1:100]*p[1:100]))
plot(p[1:100],bp)
plot(p[1:100],up)
plot(p[1:100],np)
plot(p[1:100],ep)
qo<-rnbinom(100,3,c(.3))
qo
set.seed(125089)
unif<-runif(100,min=0.8,max=1.2)
set.seed(125089)
qo<-rnbinom(100,3,c(.3))
set.seed(125089)
par(mfrow=c(1,5))
m<-rmultinom(20,5,c(.1,.2,.2,.4,.1))
b<-rbinom(100,m[1:100],(m[1:100]+1)/6)
u<-runif(100,min=5*unif[1:100]*m[1:100]-1,max=5*unif[1:100]*m[1:100]+1)
n<-rnorm(100,6*unif[1:100]*m[1:100], 1.5)
e<-rexp(100,1/(unif[1:100]*m[1:100]))
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
plot(m[1:100],e)
plot(m[1:100],qo)
set.seed(125089)
p<-rpois(100,10)
bp<-rbinom(100,p[1:100],(p[1:100]+1)/16)
up<-runif(100,min=5*unif[1:100]*p[1:100]-1,max=5*unif[1:100]*p[1:100]+1)
np<-rnorm(100,6*unif[1:100]*p[1:100], 1.5)
ep<-rexp(100,1/(unif[1:100]*p[1:100]))
qo2<-rnbinom(100,2,.275)
set.seed(125089)
p<-rpois(100,10)
bp<-rbinom(100,p[1:100],(p[1:100]+1)/16)
up<-runif(100,min=5*unif[1:100]*p[1:100]-1,max=5*unif[1:100]*p[1:100]+1)
np<-rnorm(100,6*unif[1:100]*p[1:100], 1.5)
ep<-rexp(100,1/(unif[1:100]*p[1:100]))
plot(p[1:100],bp)
plot(p[1:100],up)
plot(p[1:100],np)
plot(p[1:100],ep)
plot(p[1:100],qo2)
write.csv(m,'alumx.csv')
write.csv(p,'alumy.csv')
write.csv(qo,'comp1.csv')
write.csv(ep,'comp2.csv')
write.csv(bp,'comp3.csv')
write.csv(np,'comp4.csv')
write.csv(up,'comp5.csv')
write.csv(qo2,'comp6.csv')
write.csv(e,'comp7.csv')
write.csv(u,'comp8.csv')
write.csv(n,'comp9.csv')
write.csv(b,'comp10.csv')
plot(m[1:100],b)
plot(m[1:100],u)
plot(m[1:100],n)
plot(m[1:100],e)
plot(m[1:100],qo)
set.seed(125089)
qo2<-rnbinom(100,2,.275)
set.seed(125089)
p<-rpois(100,10)
bp<-rbinom(100,p[1:100],(p[1:100]+1)/16)
up<-runif(100,min=5*unif[1:100]*p[1:100]-1,max=5*unif[1:100]*p[1:100]+1)
np<-rnorm(100,6*unif[1:100]*p[1:100], 1.5)
ep<-rexp(100,1/(unif[1:100]*p[1:100]))
plot(p[1:100],bp)
plot(p[1:100],up)
plot(p[1:100],np)
plot(p[1:100],ep)
plot(p[1:100],qo2)
alum11x <- read.csv("~/Documents/Green/departamental/alum11/alum11x.csv")
View(alum11x)
sort(alum11x)
alum11x
alum11x$x
sort(alum11x$x)
alum11y <- read.csv("~/Documents/Green/departamental/alum11/alum11y.csv")
View(alum11y)
mean(alum11x$x)
var(alum11x$x)
b
bp
install.packages("fpc")
?kernlab
install.packages("kernlab")
install.packages("FNN")
rm(list=ls())
install(fnn)
instal(fnn)
install.packages("FNN")
library("FNN", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?FNN
?::FNN
??FNN
library(dplyr)
library(tidyr)
library(ggplot2)
library(ElemStatLearn)
graficar_digitos <- function(datos){
mat_digitos <- lapply(1:nrow(datos),
function(x){
t(matrix(as.numeric(datos[x, 2:257]),
16, 16, byrow = T))[,16:1]
})
image (z = Reduce("rbind", mat_digitos), col = terrain.colors(30))
text(seq(0,1,1/10) + 0.05, 0.05, label = datos[, 1], cex = 1.5)
}
zip_train <- data.frame(zip.train)
View(zip_train)
swiss_s <- swissroll %>% mutate(X = (x-mean(x))/sd(x),Y = (y-mean(y))/sd(y),Z = (z-mean(z))/sd(z))
library(dplyr)
library(optimbase)
library(tidyr)
library(ggplot2)
library(ElemStatLearn)
library(FNN)
library(rARPACK)
library(Matrix)
library(igraph)
library(spe)
library(scatterplot3d)
library(FactoMineR)
library(plotly)
library(plot3D)
library(magrittr)
rm(list=ls())
PlotSwissRoll <- function(CoordPoints, Col = NULL) {
if (is.null(Col)) {
Col = 1:nrow(swissroll)
}
ggplot(data = data.frame( X = CoordPoints[,1], Y = CoordPoints[,2], Col = Col),
aes(x = X, y = Y)) +
geom_point(aes(colour = Col), size = .5) + guides(color = FALSE)+scale_colour_gradientn(colours=rainbow(4))
}
# Swissroll
data("swissroll")
swissroll_o <- swissroll[order(swissroll$z),]
swiss_s <- swissroll %>% mutate(X = (x-mean(x))/sd(x),Y = (y-mean(y))/sd(y),Z = (z-mean(z))/sd(z))
# surf3D(swissroll_o, col = plotrix::color.scale(1:nrow(swissroll),c(0,1,1),c(1,1,0),0))
# scatter3D(x=swissroll_o$x,y = swissroll_o$y,z = swissroll_o$z,phi = 67,theta = 25,
#           colvar = swissroll_o$y,col = 1.5*as.double(swissroll_o$z),type='p', xlim = c(-10,13), ylim = c(-12,8), zlim = c(0,10), bty='g')
# scatterplot3d(x = swissroll,highlight.3d = FALSE,grid = TRUE,box = FALSE,color = as.character(swissroll_o$z) )
scatter3D(x=swiss_s$X,y = swiss_s$Y,z = swiss_s$Z,phi = 67,theta = 25,
colvar = swiss_s$Y,col = 1.5*as.double(swissroll_o$z),type='h',
xlim = c(-2,2), ylim = c(-2,2), zlim = c(-2,2), bty='g')
library(dplyr)
library(optimbase)
library(tidyr)
library(ggplot2)
library(ElemStatLearn)
library(FNN)
library(rARPACK)
library(Matrix)
library(igraph)
library(spe)
library(scatterplot3d)
library(FactoMineR)
library(plotly)
library(plot3D)
library(magrittr)
rm(list=ls())
PlotSwissRoll <- function(CoordPoints, Col = NULL) {
if (is.null(Col)) {
Col = 1:nrow(swissroll)
}
ggplot(data = data.frame( X = CoordPoints[,1], Y = CoordPoints[,2], Col = Col),
aes(x = X, y = Y)) +
geom_point(aes(colour = Col), size = .5) + guides(color = FALSE)+scale_colour_gradientn(colours=rainbow(4))
}
# Swissroll
data("swissroll")
swissroll_o <- swissroll[order(swissroll$z),]
swiss_s <- swissroll %>% mutate(X = (x-mean(x))/sd(x),Y = (y-mean(y))/sd(y),Z = (z-mean(z))/sd(z))
# surf3D(swissroll_o, col = plotrix::color.scale(1:nrow(swissroll),c(0,1,1),c(1,1,0),0))
# scatter3D(x=swissroll_o$x,y = swissroll_o$y,z = swissroll_o$z,phi = 67,theta = 25,
#           colvar = swissroll_o$y,col = 1.5*as.double(swissroll_o$z),type='p', xlim = c(-10,13), ylim = c(-12,8), zlim = c(0,10), bty='g')
# scatterplot3d(x = swissroll,highlight.3d = FALSE,grid = TRUE,box = FALSE,color = as.character(swissroll_o$z) )
scatter3D(x=swiss_s$X,y = swiss_s$Y,z = swiss_s$Z,phi = 67,theta = 25,
colvar = swiss_s$Y,col = 1.5*as.double(swissroll_o$z),type='h',
xlim = c(-2,2), ylim = c(-2,2), zlim = c(-2,2), bty='g')
zip_train_2 <- swiss_s
k<- nrow(zip_train_2)
# Paso 1.1: Vecinos mas cercanos
n <- 5
d <- knn.dist(zip_train_2,k=n, algorithm= "kd_tree")
index <- knn.index(zip_train_2,k=n, algorithm= "kd_tree")
# Paso 1.2: Funcion de pesos
heat_kernel <- function(x){
t<- 10
h <- exp(-((x^2)/t))
}
HK <- sapply(d,heat_kernel)
HK_matrix <- matrix(HK,nrow = k,ncol = n)
HK <- as.vector(transpose(HK_matrix))
# x1 <- as.numeric(zip_train[1,2:257])
# x2 <- as.numeric(zip_train[988,2:257])
# prueba<- heat_kernel(sqrt(sum(( x1 - x2) ^ 2)))
# Paso 1.3: Construccion de matrices D, A, y L
# 1.3.1 Matriz de Adyacencia
rowsSp1 <- rep(1:k, each = n)
# rowsSp1[1:11]
colsSp1 <- as.vector(transpose(index))
# colsSp1[1:11]
rowsSp2 <- c(rowsSp1,colsSp1)
colsSp2 <- c(colsSp1,rowsSp1)
W_sparse <- sparseMatrix(rowsSp2, colsSp2, x = rep(HK,2),use.last.ij = TRUE)
# head(summary(W_sparse))
g <- graph_from_adjacency_matrix(W_sparse, weighted=TRUE,mode="undirected")
is.connected(g)
# 1.3.2 Matriz de grados
degree_vec <- rowSums(W_sparse)
D_sparse <- sparseMatrix(1:k,1:k,x = degree_vec)
D_sparse_inv <- sparseMatrix(1:k,1:k,x = (1/degree_vec))
D_sparse_sqinv <- sparseMatrix(1:k,1:k,x = (1/sqrt(degree_vec)))
# head(summary(D_sparse))
# head(summary(D_sparse_inv))
# head(summary(D_sparse_sqinv))
# 1.3.2.1 Matriz Laplaciana
L_sparse <- D_sparse - W_sparse
# head(summary(L_sparse))
L<- graph.laplacian(g, normalized=FALSE, weight=NULL,sparse=getIgraphOpt("sparsematrices"))
head(summary(L))
# 1.3.2.2 Laplaciana Normalizada
LN <- graph.laplacian(g, normalized=TRUE, weight=NULL,sparse=getIgraphOpt("sparsematrices"))
head(summary(LN))
# 1.4 Eigenvector solver
m<- 3
EV<- eigs_sym(LN, m+1, which = "SM", sigma = NULL, opts = list(),lower = TRUE)
EV$values
v1<- D_sparse_sqinv%*%(EV$vectors[,m])
l1<- EV$vectors[m]
v1t <-transpose(v1@x)
v2<- D_sparse_sqinv%*%(EV$vectors[,m-1])
l2<- EV$vectors[m-1]
v2t <-transpose(v2@x)
v3<- D_sparse_sqinv%*%(EV$vectors[,m-2])
l3<- EV$vectors[m-2]
v3t <-transpose(v3@x)
dat <- as.data.frame(cbind(v1@x,v2@x,v3@x, swissroll))
dat<-dat%>%mutate(fx=floor(x),fy=floor(y),fz=floor(z))
# set.seed(125089)
# muestra <- dat[sample(1:k,500,replace=FALSE),]
SwissRollPCA <- PCA(swissroll)
PlotSwissRoll(SwissRollPCA$ind$coord)
PlotSwissRoll(dat)
PlotSwissRoll(SwissRollPCA$ind$coord)
PlotSwissRoll(dat)
ggplot(dat, aes(x = v1@x, y=v2@x, colour= fy)) + geom_point()
rm(ls())
setwd("~/Documents/ITAM/AprendizajeEstadistico")
r,
rm(list=ls())
minimo <- runif(1)*1
maximo <- 1+runif(1)*9
df1 <- data.frame(x1=seq(minimo,maximo,by=0.001))
View(df1)
df1$x2 <- c(rnorm(n=floor(dim(df1)[1]/2),mean=10,sd=2),  #let's make this variable induce some clusters
rnorm(n=ceiling(dim(df1)[1]/2),mean=0,sd=1))
View(df1)
angulos <- runif(n=1000)*2*pi
radios  <- runif(n=1000)/10+0.5
df2 <- data.frame(x1 =radios*cos(angulos) , x2 =radios*sin(angulos) )
#ANOTHER TOY DATASET SWISS ROLL
angulos <- runif(n=1000)*5*pi
df3 <- data.frame(x1 =angulos*cos(angulos) , x2 =angulos*sin(angulos) )
setwd("~/Documents/ITAM/TemasSelectosEstadistica/datos")
rm(list=ls())
#CREATING A TOY DATASET TWO LEVELS
minimo <- runif(1)*1
maximo <- 1+runif(1)*9
df1 <- data.frame(x1=seq(minimo,maximo,by=0.001))
df1$x2 <- c(rnorm(n=floor(dim(df1)[1]/2),mean=10,sd=2),  #let's make this variable induce some clusters
rnorm(n=ceiling(dim(df1)[1]/2),mean=0,sd=1))
#ANOTHER TOY DATASET CIRCLE
angulos <- runif(n=1000)*2*pi
radios  <- runif(n=1000)/10+0.5
df2 <- data.frame(x1 =radios*cos(angulos) , x2 =radios*sin(angulos) )
#ANOTHER TOY DATASET SWISS ROLL
angulos <- runif(n=1000)*5*pi
df3 <- data.frame(x1 =angulos*cos(angulos) , x2 =angulos*sin(angulos) )
#----------------------------- IF YOU WANT KERNEL PCA FOR THE DATASET -----------------------------
#sigma <- 1
#kres <- kpca(~., data=df3,features=2,kernel="rbfdot",kpar = list(sigma = sigma))
#df4 <- as.data.frame(kres@rotated)
df <- df3       #choose a dataset
plot(df)
################### IMPORTANT
#BEFORE THIS SECTION IT IS IMPORTANT FOR THE DATA FRAME THAT WILL BE USED TO BE CALLED "df"
#ALSO I AM ASSUMING WE CAN TAKE "x1" AS A VARIABLE FROM "df" TO SUBSET
#THIS VARIABLE HAS TO BE NUMERIC AND NON CATEGORICAL
#I SUGGEST WORKING WITH THE TOY DATA SET FIRST AND THEN MOVING ON TO TRY OTHER ONES
####################
#----------------------------- PACKAGES -----------------------------
#install.packages("fpc")
#install.packages("kernlab")
library(fpc)
library(igraph)
library(kernlab)
#----------------------------- NECESSARY PARAMETERS -----------------------------
var_o <- df$x1    #variable we will use to make the overlapping subsets
var_o <- df$x1    #variable we will use to make the overlapping subsets
n_int <- 6       #number of intervals we want
p <- 0.2          #proportion of each interval that should overlap with the next
eps <- 0.7            #epsilon makes the number of clusters VERY unstable  !!!!!
p_noise <- 0.05       #
intervals_centers <- seq(min(var_o),max(var_o),length=n_int)  #basic partition = centers
interval_length <- intervals_centers[2]-intervals_centers[1]  #to create the overlaps of p% of this length
intervals <- data.frame(centers=intervals_centers)            #create a data frame
intervals$min <- intervals_centers - (0.5+p)*interval_length
intervals$max <- intervals_centers + (0.5+p)*interval_length
View(intervals)
intervals$interval <- seq(1,n_int)
intervals$name <- with(intervals, sprintf("[%.2f;%.2f)",min,max))
View(intervals)
res <- lapply(split(intervals,intervals$interval), function(x){
return(df[var_o> x$min & var_o <= x$max,])     #res will be a list with each element res[i]
})                                                #being the points on the i'th subset
res <- lapply(split(intervals,intervals$interval), function(x){
return(df[var_o> x$min & var_o <= x$max,])     #res will be a list with each element res[i]
})                                                #being the points on the i'th subset
ints<-list()
counter1<-1;counter2<-1
for(i in 1:(n_int-1)){
df1<-as.data.frame(res[[i]])
df2<-as.data.frame(res[[i+1]])
if(i==1){
MinPts <- p_noise*dim(df1)[1]
data<- query<- cbind(1:10, 1:10)
}
c
asdf
/
knn.index(data, k=5)
data<- query<- cbind(1:10, 1:10)
knn.index(data, k=5)
library(FNN)
data<- query<- cbind(1:10, 1:10)
knn.index(data, k=5)
knnx.index(data, query, k=5)
knn.index(data, k=5)
a<-knn.index(data, k=5)
data
a
a<-knn.index(data, k=3)
a
bfs(make_ring(10) %du% make_ring(10), root=1, "out",
order=TRUE, rank=TRUE, father=TRUE, pred=TRUE,
succ=TRUE, dist=TRUE)
bfs$order
b<-bfs(make_ring(10) %du% make_ring(10), root=1, "out",
order=TRUE, rank=TRUE, father=TRUE, pred=TRUE,
succ=TRUE, dist=TRUE)
b$order
b$order[1]
b$order[4]
class(b$order)
lis<-b$order[,]
lis<-b$order[1:ncol(b)]
nrow(b)
length(b$order)
lis<-b$order[1:length(b$order)]
lis<-as.list(b$order[1:length(b$order)])
pts <- list(x = cars[,1], y = cars[,2])
lis<-list(x=b$order[1:length(b$order)])
lis<-list(x=as.integer(b$order[1:length(b$order)])
)
lis
f <- function() x
# Note the specification of a "..." argument:
formals(f) <- al <- alist(x = , y = 2+3, ... = )
f
al
e1 <- new.env()
e1$a <- 10
e1$b <- 20
as.list(e1)
lis1 <- new.ev()
lis1 <- new.env()
lis1$1<-as.integer(b$order[1:length(b$order)])
lis1$a <-as.integer(b$order[1:length(b$order)])
lis1$b <-as.integer(b$order[1:length(b$order)])
as.list(lis1)
x<-as.character(1)
x
